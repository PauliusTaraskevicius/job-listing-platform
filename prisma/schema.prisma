// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PaymentMethod {
  // Bruto (prieš mokesčius)
  BRUTO
  // Neto (į rankas) 
  NETO
}

model User {
  id          String  @id @default(uuid())
  clerkUserId String  @unique
  email       String  @unique
  firstName   String?
  lastName    String?
  imageUrl    String? @db.Text
  role        Role    @default(USER)

  job      Job[]
  category Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  city      City[]

  bookmark Bookmark[]
}

model Category {
  id    String @id @default(uuid())
  title String @unique @db.Text
  slug  String @unique @db.Text

  jobs Job[] @relation("CategoryToJob")

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [clerkUserId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

model City {
  id        String @id @default(uuid())
  cityTitle String @unique @db.Text
  slug      String @unique @db.Text
  jobs      Job[]  @relation("CityToJob")

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [clerkUserId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

model Job {
  id            String        @id @default(uuid())
  title         String        @unique @db.Text
  company       String        @db.Text
  description   String        @db.Text
  applyUrl      String        @db.Text
  paymentMethod PaymentMethod @default(BRUTO)
  salary        String
  premium       Boolean       @default(false)
  remote        Boolean?      @default(false)

  authorId String
  author   User   @relation(fields: [authorId], references: [clerkUserId], onDelete: Cascade)

  categoryId String
  category   Category @relation("CategoryToJob", fields: [categoryId], references: [id], onDelete: Cascade)

  cityId String
  city   City   @relation("CityToJob", fields: [cityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookmarks Bookmark[]

  @@index([categoryId])
  @@index([cityId])
  @@index([authorId])
}

model Bookmark {
  id String @id @default(uuid())

  authorId String
  author   User   @relation(fields: [authorId], references: [clerkUserId], onDelete: Cascade)

  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([authorId, jobId])
  @@map("bookmarks")
}

model UserSubscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  stripeCustomerId        String   @unique
  stripeSubscriptionId    String   @unique
  stripePriceId           String
  stripeCurrentPeriodEnd  DateTime
  stripeCancelAtPeriodEnd Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_subscriptions")
}
