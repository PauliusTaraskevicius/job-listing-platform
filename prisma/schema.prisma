// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PaymentMethod {
  // Bruto (prieš mokesčius)
  BRUTO
  // Neto (į rankas) 
  NETO
}

model User {
  id          String  @id @default(uuid())
  clerkUserId String  @unique
  email       String  @unique
  firstName   String?
  lastName    String?
  imageUrl    String? @db.Text
  role        Role    @default(USER)

  job      Job[]
  category Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  City      City[]
  // Tag       Tag[]
}

model Category {
  id    String @id @default(uuid())
  title String @db.Text

  jobs Job[] @relation("CategoryToJob")

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [clerkUserId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

model City {
  id        String @id @default(uuid())
  cityTitle String @db.Text
  jobs      Job[]  @relation("CityToJob")

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [clerkUserId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

// model Tag {
//   id    String @id @default(uuid())
//   title String @unique @db.Text
//   jobs  Job[]  @relation("TagToJob")

//   creatorId String
//   creator   User   @relation(fields: [creatorId], references: [clerkUserId], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Job {
  id            String        @id @default(uuid())
  title         String        @db.Text
  company       String        @db.Text
  description   String        @db.Text
  applyUrl      String        @db.Text
  paymentMethod PaymentMethod @default(BRUTO)
  salary        String
  premium       Boolean       @default(false)
  remote        Boolean?      @default(false)

  authorId String
  author   User   @relation(fields: [authorId], references: [clerkUserId], onDelete: Cascade)

  categoryId String
  category   Category @relation("CategoryToJob", fields: [categoryId], references: [id], onDelete: Cascade)

  cityId String
  city   City   @relation("CityToJob", fields: [cityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // tag    Tag?    @relation("TagToJob", fields: [tagId], references: [id], onDelete: Cascade)
  // tagId  String?
  // @@index([tagId])

  @@index([categoryId])
  @@index([cityId])
  @@index([authorId])
}
